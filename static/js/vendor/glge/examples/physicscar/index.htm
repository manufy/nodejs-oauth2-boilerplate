<!doctype html>
<html>
<head>
<title>Car Physics</title>
<script type="text/javascript" src="jiglib.js"></script>
<script type="text/javascript" src="../../glge-compiled-min.js"></script>
<style>
body{
  background-color: #555;
  font-size: 12px;
  font-family: arial;
  overflow:hidden;
  margin:0;
}
</style>



</head>
<body>

<canvas id="canvas" width="500" height="500">

</canvas>
<div id="debug" style="position:absolute;left: 0px; top: 0px;"></div>
<script id="glge_document" type="text/xml">
	<glge>
		<mesh id="cubeMesh">
			<positions>1.000,1.000,1.000,1.000,1.000,-1.000,-1.000,1.000,-1.000,1.000,1.000,1.000,-1.000,1.000,-1.000,-1.000,1.000,1.000,-1.000,-1.000,-1.000,-1.000,-1.000,1.000,-1.000,1.000,1.000,-1.000,-1.000,-1.000,-1.000,1.000,1.000,-1.000,1.000,-1.000,1.000,-1.000,-1.000,1.000,-1.000,1.000,-1.000,-1.000,-1.000,1.000,-1.000,1.000,-1.000,-1.000,1.000,-1.000,-1.000,-1.000,1.000,1.000,-1.000,1.000,1.000,1.000,1.000,-1.000,-1.000,1.000,1.000,1.000,1.000,-1.000,1.000,1.000,-1.000,-1.000,1.000,1.000,1.000,-1.000,1.000,1.000,1.000,-1.000,1.000,-1.000,1.000,1.000,-1.000,-1.000,1.000,1.000,-1.000,1.000,1.000,1.000,-1.000,1.000,-1.000,-1.000,-1.000,-1.000,-1.000,1.000,1.000,-1.000,-1.000,-1.000,-1.000,-1.000,1.000,-1.000</positions>
			<normals>0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,0.000,1.000,0.000,-1.000,0.000,-0.000,-1.000,0.000,-0.000,-1.000,0.000,-0.000,-1.000,0.000,-0.000,-1.000,0.000,-0.000,-1.000,0.000,-0.000,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,-0.000,-1.000,-0.000,-0.000,-1.000,0.000,-0.000,-1.000,0.000,-0.000,-1.000,0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,-0.000,0.000,1.000,-0.000,0.000,1.000,-0.000,0.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,-0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,0.000,-1.000,0.000,-0.000,-1.000,0.000,-0.000,-1.000,0.000,-0.000,-1.000</normals>;
			<faces>0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,</faces>
		</mesh>
		<mesh id="groundMesh">
			<positions>1.000,1.000,0.000,-1.000,1.000,0.000,-1.000,-1.000,0.000,1.000,1.000,0.000,-1.000,-1.000,0.000,1.000,-1.000,0.000</positions>
			<normals>-0.000,0.000,1.000,-0.000,0.000,1.000,-0.000,0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000,0.000,-0.000,1.000</normals>;
			<uv1>0.000,0.000,1.000,0.000,1.000,1.000,0.000,0.000,1.000,1.000,0.000,1.000</uv1>
			<faces>0,1,2,3,4,5,</faces>
		</mesh>
		
		<mesh id="xline">
			<positions>
			-1000.0,0,0,
			1000.0,0,0
			</positions>
		</mesh>
		<mesh id="yline">
			<positions>
			0,-1000,0,
			0,1000,0
			</positions>
		</mesh>
		<mesh id="zline">
			<positions>
			0,0,-1000,
			0,0,1000
			</positions>
		</mesh>
		
		
		<material id="red" specular="0" color="#f00" shadeless="1" />
		<material id="green" specular="0" color="#0f0" shadeless="1" />
		<material id="blue" specular="0" color="#00f" shadeless="1" />
		<material id="lines" specular="0" color="#444" shadeless="1" />
		<material id="box" specular="0" color="#ccc" />
		
		<scene id="mainscene" ambient_color="#fff" background_color="rgba(0,0,0,0)" fog_near="50" fog_far="60" fog_color="#555" xfog_type="FOG_LINEAR" camera="#mainCamera">
			<group id="graph">
				<object id="xaxis" draw_type="DRAW_LINES" line_width="2" mesh="#xline" material="#red"  />
				<object id="yaxis" draw_type="DRAW_LINES" line_width="2" mesh="#yline" material="#green"  />
				<object id="zaxis" draw_type="DRAW_LINES" line_width="2" mesh="#zline" material="#blue"  />
			</group>
			<group id="cameraOffset">
				    <camera id="mainCamera" loc_z="20" loc_y="2.2" loc_x="0" rot_x="0" rot_y="0" />
			</group>
			<physics_box  loc_y="0" loc_x="5" mass="2" width="20" height="0.3" depth="20" rot_z="0.20" movable="FALSE">
			<object mesh="#cubeMesh" material="#box" scale="10" scale_y="0.15" />
			</physics_box>
			<physics_car id="car" loc_y="5.5" mass="15" width="4" depth="2" height="2">
				<object mesh="#cubeMesh" material="#box" scale_x="2"/>
				<physics_wheel id="wheel1" loc_x="1.5" loc_z="1.2" loc_y="-0.6">
					<object mesh="#cubeMesh" material="#box" id="wheel1obj" scale="0.75" scale_z="0.25" />
				</physics_wheel>
				<physics_wheel id="wheel2" loc_x="1.5" loc_z="-1.2" loc_y="-0.6">
					<object mesh="#cubeMesh" material="#box" id="wheel2obj" scale="0.75" scale_z="0.25" />
				</physics_wheel>
				<physics_wheel id="wheel3" powered="TRUE" loc_x="-1.5" loc_z="1.2" loc_y="-0.6">
					<object mesh="#cubeMesh" material="#box" id="wheel3obj" scale="0.75" scale_z="0.25" />
				</physics_wheel>
				<physics_wheel id="wheel4" powered="TRUE" loc_x="-1.5" loc_z="-1.2" loc_y="-0.6">
					<object mesh="#cubeMesh" material="#box" id="wheel4obj" scale="0.75" scale_z="0.25" />
				</physics_wheel>
			</physics_car>
			<physics_plane normal="PHYSICS_YAXIS">
			<object mesh="#groundMesh" material="#box" rot_x="-1.57" scale="100" />
			</physics_plane>
			<light id="light" loc_x="-10" loc_y="20" loc_z="-5" rot_x="-1.3" attenuation_constant="5" type="L_POINT" />
			<light id="light" loc_x="-10" loc_y="20" loc_z="10" rot_x="-1.3" attenuation_constant="5" type="L_POINT" />
		</scene>
	</glge>
</script>



<script>

var lookAt=function(origin,point){
	var coord=[origin[0]-point[0],origin[1]-point[1],origin[2]-point[2]];
	var zvec=GLGE.toUnitVec3(coord);
	var xvec=GLGE.toUnitVec3(GLGE.crossVec3([0,1,0],zvec));
	var yvec=GLGE.toUnitVec3(GLGE.crossVec3(zvec,xvec));		
	return [xvec[0], yvec[0], zvec[0], 0,
					xvec[1], yvec[1], zvec[1], 0,
					xvec[2], yvec[2], zvec[2], 0,
					0, 0, 0, 1];
}


var canvas = document.getElementById( 'canvas' );
canvas.width=innerWidth;
canvas.height=innerHeight;


var drag=false;
var view=false;
var rotY=0;
var startpoint;
var cameraPos=[0,0,20];
canvas.onmousedown=function(e){
	if(e.button==0){
        view=true;
        startpoint=[e.clientX,e.clientY,cameraPos[0],cameraPos[1]];
	}
	e.preventDefault();
}
canvas.onmouseup=function(e){
	view=false;
}
canvas.onmousemove=function(e){

	if(view){
		cameraPos[0]=startpoint[2]-(e.clientX-startpoint[0])/canvas.width*20;
		cameraPos[1]=startpoint[3]+(e.clientY-startpoint[1])/canvas.height*20;
		
    	camera.setRotMatrix(lookAt([0,cameraPos[1],0],[0,0,-cameraPos[2]]));
        cameraOffset.setRotY(cameraPos[0]/10);
        cameraOffset.setLocY(cameraPos[1]);
        render=true;
	}
}
canvas.onmousewheel=function(e){
    var wheelData = e.detail ? e.detail/10 : e.wheelDelta/-300;
    cameraPos[2]+=wheelData;
    if(cameraPos[2]<1 && cameraPos[2]>-1) cameraPos[2]=cameraPos[2]/Math.abs(cameraPos[2]);
    camera.setLocZ(cameraPos[2]);
    camera.setRotMatrix(lookAt([0,cameraPos[1],0],[0,0,-cameraPos[2]]));
    render=true;
}
canvas.addEventListener('DOMMouseScroll', canvas.onmousewheel, false);


canvas.oncontextmenu=function(e){
	return false;
}

var renderer = new GLGE.Renderer( canvas );

var XMLdoc = new GLGE.Document();
var camera;
var cameraOffset;



	
XMLdoc.onLoad = function(){	
	var scene = XMLdoc.getElement( "mainscene" );
	camera = XMLdoc.getElement( "mainCamera" );
	cameraOffset = XMLdoc.getElement( "cameraOffset" );
	car = XMLdoc.getElement( "car" );
	wheel1 = XMLdoc.getElement( "wheel1" );
	wheel2 = XMLdoc.getElement( "wheel2" );
	
	var keys=new GLGE.KeyInput();

	var positions=[];
	for(var x=-50; x<50;x++){
		if(x!=0){
			positions.push(x);
			positions.push(0);
			positions.push(-50);
			positions.push(x);
			positions.push(0);
			positions.push(50);
			positions.push(50);
			positions.push(0);
			positions.push(x);
			positions.push(-50);
			positions.push(0);
			positions.push(x);
		}
	}
	
	var line=(new GLGE.Object).setDrawType(GLGE.DRAW_LINES);
	line.setMesh((new GLGE.Mesh).setPositions(positions));
	line.setMaterial(XMLdoc.getElement( "lines" ));
	scene.addObject(line);
		
	scene.setGravity([0,-9.8,0,0]);
	renderer.setScene( scene );
	renderer.render();
	var lasttime;
	
	
	
	var rot=0;
	var render=function(){
		var now=+new Date;
		if(keys.isKeyPressed(GLGE.KI_W)) {	
			car.drive(15);
		}else if(keys.isKeyPressed(GLGE.KI_S)) {	
			car.drive(-15);	
		}else{	
			car.drive(0);		
		}
		if(keys.isKeyPressed(GLGE.KI_SPACE)) {	
			car.brake(1);
		}else{	
			car.brake(0);
		}
		if(keys.isKeyPressed(GLGE.KI_A)) {
			rot+=0.02;
			rot=Math.min(rot,1.3);
		}
		if(keys.isKeyPressed(GLGE.KI_D)) {
			rot-=0.02;
			rot=Math.max(rot,-1.3);
		}
		rot=rot*0.95;
		wheel1.setWheelRotation(rot);
		wheel2.setWheelRotation(rot);

		if(lasttime) scene.physicsTick((now-lasttime)/500);
		lasttime = now;
		renderer.render();
		requestAnimationFrame(render);
	};
	render();
}

XMLdoc.parseScript("glge_document");

</script>
</body>
</html>
